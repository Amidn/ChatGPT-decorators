# ==========================================================
# Prompt Decorators Definition File (YAML schema)
# Author: Amid Nayerhoda
# github:  https://github.com/Amidn/ChatGPT-decorators
# Date: 2025-09-01
# Description: Defines decorators for modifying ChatGPT responses.
# Email: Nayerhoda@infn.it
# Notes:
#  - Paste this YAML (including compliance + decorators) into ChatGPT at the start of a session.
#  - In your prompt, clearly state that this file defines decorators and MUST be obeyed.
#  - `@@` is a project convention; ChatGPT does not natively understand it unless you define it here.
# ==========================================================

schema: "chatgpt-decorators"
language: "en"
version: "0.0.3"

# ------------------------------
# Defaults / Global Settings
# ------------------------------
defaults:
  scope: "inherits"            # obeys @@chat / @@message when present
  precedence:                   # high → low (tie-breakers)
    - output_format            # @@OutputFormat takes priority
    - verification             # @@CiteSources, @@FactCheck
    - structure                # @@StepByStep, @@Polish
    - method                   # @@Reasoning, @@Assessment, @@Synthesize
    - error_handling           # @@RiskReport
    - tone                     # @@Tone
    - user_confirmation        # @@Confirm

  activation_tokens:
    decorator_prefix: "@@"
    chat_scope: "@@chat"
    message_scope: "@@message"
    clear: "@@clear"
    active_list: "@@InProcess"
    available_list: "@@Help"

  memory:
    chat_scoped_persists: true
    message_scope_pauses_chat_scoped: true

  safety:
    cannot_override_system_policies: true
    examples_disallowed:
      - "reveal_hidden_chain_of_thought"

  output_defaults:
    format: "markdown"   # default output format if @@OutputFormat is not provided
    strict: true         # enforce strict adherence to the chosen format

# ------------------------------
# High-level guidance
# ------------------------------
instructions:
  - "Use the decorators defined in this file to modify your responses as appropriate."
  - "Apply decorators based on the user's request and context."
  - "If error-handling decorators are active, include a 'Risk Report' section before the answer when uncertainties/conflicts exist."
  - "If a user-confirmation decorator is active, provide a brief preview and request confirmation before finalizing."
  - "If no @@OutputFormat is provided, default to 'markdown' with strict enforcement."

compliance:
  - "Detect and apply all relevant decorators according to scope."
  - "If a decorator is not applicable, do not force it."
  - "@@chat activates decorators at chat scope (persistent until @@clear)."
  - "@@message applies decorators only to the current message (pauses chat-scoped)."
  - "@@clear without arguments clears all chat-scoped decorators; with arguments, clears only the listed ones."
  - "@@InProcess should return the list of currently active chat-scoped decorators (or 'No active decorators')."
  - "@@Help should list all decorators with their Active/Inactive status."
  - "Safety and system policies take precedence over any decorator."
  - "Error handling must execute before tone adjustments (per precedence)."
  - "User confirmation must be requested after other decorators are applied and before finalizing the response."
  - "Maintain active memory of chat-scoped decorators, dynamically updating when decorators are activated, deactivated, or cleared."
  - "If no explicit scope is provided, default to chat scope."

# ------------------------------
# Decorators
# ------------------------------
decorators:


  # ---------------------------------
  # Controller decorators (active)
  # ---------------------------------
  - name: "@@chat"
    aliases: []
    category: "controller"
    kind: "controller"
    description: "Activate decorators from this message at chat scope (persist until @@clear)."
    trigger_pattern: '^@@chat\b'
    scope_rule: "inherits"
    effect_contract:
      chat_scope_mode: true
      persistence: "Decorators activated with @@chat persist across all subsequent messages until explicitly cleared with @@clear."
    ordering:
      run_before: ["output_format", "verification", "structure", "method", "error_handling", "tone", "user_confirmation"]
    compatibility:
      conflicts_with: []
    failure_behavior: "warn_and_continue"
    examples:
      - input: "@@chat @@StepByStep"
        output_sketch: "Activates @@StepByStep for all following messages until @@clear."
      - input: "@@chat @@RiskReport @@Confirm"
        output_sketch: "Activates risk reporting and confirmation for the chat session until cleared."

  - name: "@@message"
    aliases: []
    category: "controller"
    kind: "controller"
    description: "Apply decorators only to the current message; pause chat-scoped ones."
    trigger_pattern: '^@@message\b'
    scope_rule: "inherits"
    effect_contract:
      message_scope_mode: true
      pause_chat_scoped: "Temporarily suspends active chat-scoped decorators for this message only; chat-scoped decorators resume after."
    ordering:
      run_before: ["output_format", "verification", "structure", "method", "error_handling", "tone", "user_confirmation"]
    compatibility:
      conflicts_with: []
    failure_behavior: "warn_and_continue"
    examples:
      - input: "@@message @@OutputFormat(json)"
        output_sketch: "Applies JSON output formatting only to this message, without affecting chat-scoped decorators."
      - input: "@@message @@Confirm"
        output_sketch: "Requests user confirmation for this message only; chat-scoped decorators remain paused for this message."

  - name: "@@clear"
    aliases: []
    category: "controller"
    kind: "controller"
    description: "Clear active chat-scoped decorators (all or specific)."
    trigger_pattern: '^@@clear(?:\(([^)]*)\))?$'
    scope_rule: "inherits"
    parameters:
      - name: "targets"
        type: list
        item_type: string
        required: false
        parse:
          separator: ","
          trim_whitespace: true
    effect_contract:
      clear_targets: "all_if_empty_else_named"
      on_unknown_target: "warn_and_ignore"
    ordering:
      run_before: ["output_format", "verification", "structure", "method", "error_handling", "tone", "user_confirmation"]
    compatibility:
      conflicts_with: []
    failure_behavior: "warn_and_continue"
    examples:
      - input: "@@clear"
        output_sketch: "Clears all active chat-scoped decorators."
      - input: "@@clear(@@StepByStep, @@RiskReport)"
        output_sketch: "Clears only the specified decorators from the active chat-scoped list."
      - input: "@@clear(UnknownDecorator)"
        output_sketch: "Warns about unknown decorator and ignores it."

  - name: "@@Help"
    aliases: ["@@help"]
    category: "utility"
    description: "Print a meta header (author, description, GitHub latest link, current version) from the file header on the first line, then list all available decorators with their statuses and descriptions."
    trigger_pattern: '^(?:@@Help\b|help\b)'
    structure_spec:
      type: "listing"
      # New: show a one-line meta header before the list, populated from the file header.
      meta_header: true
      meta_header_template: "ChatGPT Decorators — {description} | Author: {author} | GitHub (latest): {github} | Version: {version}"
      meta_fields_source:
        author: "$header.Author"
        description: "$header.Description"
        github: "$header.github"
        version: "$header.version"
      item_format: "- {name}: {status} — {description}"

  - name: "@@InProcess"
    category: "utility"
    description: "Show the list of currently active chat-scoped decorators."
    trigger_pattern: '^@@InProcess\b'
    structure_spec:
      type: "listing"
      item_format: "- {name}"



  # ---------------------------------
  # Action decorators  
  # ---------------------------------

  - name: "@@FactCheck"
    aliases: ["@@VerifyClaims"]
    category: "verification"
    description: "Check the factual accuracy of key claims before finalizing the response, and provide supporting sources."
    trigger_pattern: '^@@FactCheck\b'
    structure_spec:
      sections: [
        "Initial Answer",
        "Identify Claims",
        "Research & Verify",
        "Mark Uncertainties",
        "Provide Verified Sources",
        "Final Answer"
      ]
    effect_contract:
      requires_fact_check: true
      include_confidence: true
      confidence_scale: ["low","medium","high"]
      require_supporting_sources: true

  - name: "@@CiteSources"
    aliases: ["@@WithReferences", "@@ReferenceCheck", "@@SourceCheck", "@@AddCitations"]
    category: "verification"
    description: "Ensure all claims are supported with credible references or citations (academic or journalistic style)."
    trigger_pattern: '^@@CiteSources\b'
    structure_spec:
      sections: [
        "Initial Answer",
        "Identify Key Claims",
        "Find Credible Sources",
        "Integrate Citations",
        "Provide Full Citations",
        "Verify Credibility",
        "Final Answer"
      ]

  - name: "@@Polish"
    aliases: ["@@Refine"]
    category: "structure"
    description: "Iteratively polish and improve a draft for clarity, accuracy, or effectiveness. Each pass shows Change Notes and a Refined Draft, then a Final Answer."
    trigger_pattern: '^@@Polish(?:\(([^)]*)\))?\b'
    parameters:
      - name: "iterations"
        type: integer
        required: false
        default: 3
      - name: "goal"
        type: string
        required: false
        description: "Primary objective for polishing (e.g., 'shorter and clearer', 'more persuasive', 'ATS-friendly')."
    effect_contract:
      iterations: "@parameters.iterations"
      optimization_goal: "@parameters.goal"
    structure_spec:
      iteration_template:
        label_format: "[Iteration {i}]"
        sections: ["Change Notes", "Refined Draft"]
      final_section_label: "[Final Answer]"
    examples:
      - input: "@@Polish Write a two-sentence blurb about KM3NeT."
        output_sketch: |
          [Iteration 1]
          Change Notes: • Clarify detector location
          Refined Draft: ...
          [Iteration 2]
          Change Notes: • Shorten second sentence
          Refined Draft: ...
          [Final Answer]
          ...
      - input: "@@Polish(iterations=5, goal='make it more persuasive') Draft a short cover letter."
        output_sketch: |
          [Iteration 1] ...
          ...
          [Final Answer] ...

  - name: "@@StepByStep"
    category: "structure"
    description: "Structure the answer as a sequence of logically ordered steps labeled [Step 1] … [Final Step]."
    trigger_pattern: '^@@StepByStep(?:\(([^)]*)\))?\b'
    scope_rule: "inherits"
    parameters:
      - name: "n"
        type: integer
        required: false
        description: "Target number of steps (hint, not strict)."
      - name: "labels"
        type: list
        item_type: string
        required: false
        description: "Custom labels for steps (e.g., ['[1]', '[2]', '[Final]'])."
      - name: "final_label"
        type: string
        required: false
        default: "[Final Step]"
      - name: "compact"
        type: boolean
        required: false
        default: false
    effect_contract:
      requires_sequential_steps: true
      enforce_logical_order: true
      enforce_labels: true
      default_labels: ["[Step 1]", "[Step 2]" ]
      final_step_required: true
      labels: "@parameters.labels"          # overrides defaults if provided
      final_label: "@parameters.final_label"
      compact_mode: "@parameters.compact"
      target_step_count: "@parameters.n"
    structure_spec:
      type: "sequential_steps"
    ordering:
      run_after: ["tone"]
      run_before: ["output_format"]
    compatibility:
      conflicts_with: []
    failure_behavior: "warn_and_continue"
    examples:
      - input: "@@StepByStep How do I bake a cake?"
        output_sketch: |
          [Step 1] Gather ingredients.
          [Step 2] Mix wet and dry components.
          [Final Step] Bake and cool.
      - input: "@@StepByStep(n=5, compact=true) Set up a Python project."
        output_sketch: |
          [Step 1] Install Python 3.x.
          [Step 2] Create a virtual environment.
          [Step 3] Activate the environment.
          [Step 4] Install dependencies.
          [Final Step] Run a quick smoke test.
      - input: "@@StepByStep(labels=['[1]','[2]','[Done]'], final_label='[Done]') Outline the plan."
        output_sketch: |
          [1] Define scope.
          [2] Assign tasks.
          [Done] Review & commit.

  - name: "@@Reasoning"
    aliases: ["@@LogicCheck", "@@SanityCheck"]
    category: "method"
    description: "Audit assumptions and reasoning rigorously: identify stated/hidden assumptions, test their validity, scan for biases/fallacies, and ensure the conclusion follows. Never expose hidden chain-of-thought."
    trigger_pattern: '^@@Reasoning(?:\(([^)]*)\))?\b'
    scope_rule: "inherits"
    parameters:
      - name: "level"
        type: enum
        allowed: ["standard", "strict"]
        required: false
        default: "strict"
        description: "Strict runs a deeper bias/fallacy scan and tighter validity checks."
      - name: "max_flags"
        type: integer
        required: false
        default: 5
        description: "Maximum number of bias/fallacy/logic flags to list."
      - name: "list_evidence_needs"
        type: boolean
        required: false
        default: true
        description: "If true, enumerate claims that require external evidence/citations."
    effect_contract:
      requires_reasoning: true
      reasoning_placement: "before_answer"
      no_chain_of_thought: true
      summarized_reasoning_only: true
      # Core audits
      identify_assumptions: true
      validate_assumptions: true              # mark plausible/unsupported/invalid
      bias_scan: true                          # e.g., confirmation, anchoring, availability (summary only)
      fallacy_scan: true                       # e.g., non sequitur, false cause, equivocation (summary only)
      inference_audit: true                    # premise → inference → conclusion (concise)
      contradiction_check: true                # internal consistency pass
      boundary_conditions_check: true          # note edge cases where conclusion may fail
      max_flags: "@parameters.max_flags"
      evidence_needed_list: "@parameters.list_evidence_needs"
      strict_mode: "@parameters.level"
    structure_spec:
      sections: [
        "Assumptions (stated & hidden)",
        "Assumption Validity (pass / needs support / invalid)",
        "Bias & Fallacy Scan (≤N flags ; brief)",
        "Logic Audit (premise → inference → conclusion, concise)",
        "Evidence Needed (claims to verify or cite)",
        "Conclusion (qualified)"
      ]
    ordering:
      run_before: ["verification", "output_format"]   # do logic first; then fact-check/citations; then formatting
    compatibility:
      conflicts_with: []
    failure_behavior: "warn_and_continue"
    examples:
      - input: "@@Reasoning Assess the claim that method A outperforms method B on dataset X."
        output_sketch: |
          **Assumptions (stated & hidden)**: ...
          **Assumption Validity**: ...
          **Bias & Fallacy Scan (≤5)**: ...
          **Logic Audit**: ...
          **Evidence Needed**: metrics source; baseline configs; statistical test.
          **Conclusion (qualified)**: ...
      - input: "@@Reasoning(level=standard, max_flags=3) Are these two statements logically compatible?"
        output_sketch: |
          **Assumptions**: ...
          **Validity**: ...
          **Bias & Fallacy Scan (≤3)**: ...
          **Logic Audit**: ...
          **Conclusion (qualified)**: ...

  - name: "@@Assessment"
    aliases: ["@@Critique", "+++Critique", "@@Review", "@@Evaluate", "@@Feedback"]
    category: "method"
    description: "Provide a balanced, constructive assessment: identify the subject, highlight strengths, critique weaknesses, suggest improvements, and end with a constructive conclusion."
    trigger_pattern: '^@@Assessment(?:\(([^)]*)\))?\b'
    scope_rule: "inherits"
    parameters:
      - name: "min_strengths"
        type: integer
        required: false
        default: 2
      - name: "min_weaknesses"
        type: integer
        required: false
        default: 2
      - name: "improvement_count"
        type: integer
        required: false
        default: 3
    effect_contract:
      balanced_assessment: true
      require_min_strengths: "@parameters.min_strengths"
      require_min_weaknesses: "@parameters.min_weaknesses"
      require_improvements: "@parameters.improvement_count"
    structure_spec:
      sections: [
        "Identify Subject",
        "Highlight Strengths",
        "Critique Weaknesses",
        "Suggest Improvements",
        "Constructive Conclusion"
      ]
    ordering:
      run_after: ["tone"]
      run_before: ["output_format"]
    compatibility:
      conflicts_with: []
    failure_behavior: "warn_and_continue"
    examples:
      - input: "@@Assessment(min_strengths=2, min_weaknesses=2, improvement_count=3) Review this abstract."
        output_sketch: |
          **Identify Subject**: ...
          **Highlight Strengths**: ...
          **Critique Weaknesses**: ...
          **Suggest Improvements**: ...
          **Constructive Conclusion**: ...

  - name: "@@Synthesize"
    aliases: ["@@CompareSources", "@@MultiPerspective", "@@LiteratureReview", "@@Debate", "+++Debate"]
    category: "method"
    description: "Analyze and synthesize multiple sources or viewpoints: normalize claims, compare evidence and methods, map agreements/conflicts, appraise quality/bias, and produce a justified conclusion. Optionally include an update plan for a user draft."
    trigger_pattern: '^@@Synthesize(?:\(([^)]*)\))?\b'
    scope_rule: "inherits"
    parameters:
      - name: "criteria"
        type: list
        item_type: string
        required: false
        default: ["assumptions","methods","data","results","limitations","relevance"]
        description: "Dimensions to compare across sources."
      - name: "stance"
        type: enum
        allowed: ["neutral","best_supported","devils_advocate"]
        required: false
        default: "neutral"
        description: "Neutral reports the landscape; best_supported privileges the strongest evidence; devils_advocate stresses counterarguments."
      - name: "include_update_plan"
        type: boolean
        required: false
        default: true
        description: "If true and a user draft is provided, include a concise update plan to reconcile it with new sources."
      - name: "max_sources"
        type: integer
        required: false
        default: 8
        description: "Upper bound on sources to synthesize (for brevity)."
    effect_contract:
      multi_source_analysis: true
      require_comparison: true
      normalize_claims: true               # extract comparable claims across sources
      build_evidence_matrix: true          # tabulate claims vs sources
      rate_evidence_quality: true          # brief quality/bias appraisal per source
      agreement_conflict_mapping: true     # agreements, partial agreements, conflicts
      inference_synthesis: true            # justify conclusion from mapped evidence
      stance_mode: "@parameters.stance"
      comparison_criteria: "@parameters.criteria"
      summarized_reasoning_only: true      # never expose hidden chain-of-thought
      include_update_plan: "@parameters.include_update_plan"
      cap_sources_to: "@parameters.max_sources"
    structure_spec:
      sections: [
        "Corpus & Scope",                  # list sources; note any user draft
        "Normalized Claims",               # comparable statements extracted
        "Methods & Data (overview)",       # key methodological/data differences
        "Agreement–Conflict Matrix",       # quick map of which source supports what
        "Quality & Bias Appraisal",        # concise appraisal per source
        "Synthesis & Inference",           # what the weight of evidence supports
        "Implications for User Draft (if any)", # concrete impact on the draft
        "Update Plan (actionable steps)",  # edits/additions/removals to make
        "Conclusion & Confidence"          # stance-aligned conclusion + confidence
      ]
    ordering:
      run_after: ["tone", "method"]   # do logic/stance after reasoning audit
      run_before: ["verification", "output_format", "user_confirmation"]
    compatibility:
      conflicts_with: []
    failure_behavior: "warn_and_continue"
    examples:
      - input: "@@Synthesize Compare these 4 papers on neutrino mass ordering and tell me which conclusion is best supported."
        output_sketch: |
          **Corpus & Scope**: P1–P4 (2019–2024), ...
          **Normalized Claims**: C1: Normal ordering favored; C2: ...
          **Agreement–Conflict Matrix**: P1 ✓ C1; P2 ± C1; P3 ✗ C1; ...
          **Quality & Bias Appraisal**: P3 small N; P2 method variance, ...
          **Synthesis & Inference**: Weight favors C1 given ...
          **Conclusion & Confidence**: Best-supported: C1; Confidence: medium-high.
      - input: "@@Synthesize(include_update_plan=true) Contrast my draft’s Section 3 with this new paper and propose edits."
        output_sketch: |
          **Corpus & Scope**: Draft §3 vs NewPaper (2025)...
          **Normalized Claims**: Draft: D1–D3; New: N1–N3...
          **Implications for User Draft**: Replace D2 with N2; qualify D3...
          **Update Plan**: Edit §3.2 lines x–y; add citation; adjust fig caption...


  # ---------------------------------
  # Programing decorators  
  # ---------------------------------

  - name: "@@CodeGen"
    aliases: ["@@Scaffold"]
    category: "method"
    description: "Generate code or project scaffolds across languages: blueprint, scaffold, implement modules, extend repos, or create shims—while honoring explicit specs."
    trigger_pattern: '^@@CodeGen(?:\(([^)]*)\))?\b'
    scope_rule: "inherits"
    parameters:
      - name: "mode"
        type: enum
        allowed: ["blueprint","scaffold","implement","extend","shim"]
        required: false
        default: "scaffold"
        description: "blueprint: design/API spec; scaffold: repo/files; implement: runnable code; extend: add to existing tree; shim: adapters/connectors."
      - name: "language"
        type: enum
        allowed: ["auto","python","cpp","c","java","kotlin","js","ts","go","rust","csharp","php","ruby","r","sql","bash","other"]
        required: false
        default: "auto"
        description: "Primary language; 'auto' attempts detection from brief/constraints."
      - name: "runtime"
        type: string
        required: false
        default: ""
        description: "Toolchain/dialect hints (e.g., 'python3.11', 'gcc13 -std=c++20', 'node20', 'postgres15')."
      - name: "package_manager"
        type: enum
        allowed: ["auto","pip","uv","poetry","conda","npm","pnpm","yarn","cargo","go","cmake","maven","gradle","r_pkgdown","none"]
        required: false
        default: "auto"
        description: "Ecosystem manager/build system."
      - name: "frameworks"
        type: list
        item_type: string
        required: false
        description: "Requested frameworks/libs (e.g., ['pytest','ruff','mypy'] or ['gtest','fmt'])."
      - name: "targets"
        type: list
        item_type: enum
        required: false
        description: "Outputs: cli | library | service | notebook | plugin | extension."
        # item enums
        item_type_allowed: ["cli","library","service","notebook","plugin","extension"]
      - name: "entry_point"
        type: string
        required: false
        default: ""
        description: "Executable entry (e.g., 'src/app.py:main', 'src/main.cpp')."
      - name: "api_style"
        type: enum
        allowed: ["auto","oop","functional","mixed"]
        required: false
        default: "auto"
      - name: "repo_layout"
        type: enum
        allowed: ["src_layout","flat","monorepo"]
        required: false
        default: "src_layout"
      - name: "tests"
        type: enum
        allowed: ["none","unit","integration","both"]
        required: false
        default: "unit"
      - name: "lint_fmt"
        type: enum
        allowed: ["on","off"]
        required: false
        default: "on"
      - name: "ci"
        type: enum
        allowed: ["none","github_actions","gitlab_ci"]
        required: false
        default: "github_actions"
      - name: "containerize"
        type: enum
        allowed: ["none","docker","compose"]
        required: false
        default: "none"
      - name: "license"
        type: enum
        allowed: ["MIT","Apache-2.0","BSD-3-Clause","GPL-3.0","Unlicense","none"]
        required: false
        default: "MIT"
      - name: "docs"
        type: enum
        allowed: ["readme","mkdocs","sphinx","roxygen2","pkgdown","none"]
        required: false
        default: "readme"
      - name: "dependencies_allowlist"
        type: list
        item_type: string
        required: false
        description: "Restrict dependencies to this list (names or patterns)."
      - name: "dependencies_denylist"
        type: list
        item_type: string
        required: false
        description: "Ban dependencies (names or patterns)."
      - name: "constraints"
        type: list
        item_type: enum
        required: false
        description: "Generation constraints: minimal_deps | portable | hpc | gpu | wasm | offline."
        item_type_allowed: ["minimal_deps","portable","hpc","gpu","wasm","offline"]
      - name: "naming_convention"
        type: enum
        allowed: ["snake_case","camelCase","PascalCase","kebab-case","auto"]
        required: false
        default: "auto"
      - name: "examples"
        type: integer
        required: false
        default: 1
        description: "Number of usage examples to include."
      - name: "deterministic_seed"
        type: integer
        required: false
        default: 0
        description: "If >0, stabilize generated content ordering."
      - name: "extend_from"
        type: string
        required: false
        default: ""
        description: "Paste an existing file tree/manifest; generator will add onto it."
    effect_contract:
      # Core guarantees
      code_generation_enabled: true
      honors_spec_fidelity: true           # do not silently 'improve' beyond the brief
      produces_runnable_when_implement: true
      produces_complete_scaffold_when_scaffold: true
      produces_clear_blueprint_when_blueprint: true
      safe_defaults_no_secrets: true       # .env.example, use env vars
      minimal_dependencies_by_default: true
      add_tests_per_param: "@parameters.tests"
      add_ci_per_param: "@parameters.ci"
      add_lint_fmt_per_param: "@parameters.lint_fmt"
      add_container_per_param: "@parameters.containerize"
      repo_layout_mode: "@parameters.repo_layout"
      language_hint: "@parameters.language"
      runtime_hint: "@parameters.runtime"
      package_manager_hint: "@parameters.package_manager"
      api_style_hint: "@parameters.api_style"
      entry_binding: "@parameters.entry_point"
      apply_allowlist: "@parameters.dependencies_allowlist"
      apply_denylist: "@parameters.dependencies_denylist"
      apply_constraints: "@parameters.constraints"
      naming_convention_hint: "@parameters.naming_convention"
      example_count: "@parameters.examples"
      deterministic_mode: "@parameters.deterministic_seed"
      extend_from_manifest: "@parameters.extend_from"
    structure_spec:
      sections:
        - "Intent & Parameters"            # echo resolved settings
        - "Design/Blueprint (if requested)"# APIs, modules, data models, deps plan
        - "Project Tree / Manifest"        # file tree with brief purpose tags
        - "Generated Files"                # show content of key files
        - "How to Run & Test"              # commands: install, run, test, lint, ci
        - "Notes & Constraints"            # deps policy, license, secrets handling
    ordering:
      run_before: ["verification","structure","tone","output_format","user_confirmation"]
      run_after: ["method"]                 # remains in method but executes early
    compatibility:
      conflicts_with: []                    # intentionally compatible with @@CodeCheck
    failure_behavior: "warn_and_continue"   # if ambiguity remains, generate safest minimal viable output
    examples:
      - input: "@@CodeGen(mode=blueprint, language=python, runtime='python3.11', targets=['library','cli'], tests='unit', lint_fmt='on') Build an 'analysis' package for data processing."
        output_sketch: |
          Intent & Parameters: Python 3.11, library+CLI, unit tests, lint on.
          Design/Blueprint: Public API (analysis.load, analysis.transform, analysis.stats, CLI 'analysis run').
          Project Tree / Manifest: src/analysis/__init__.py, src/analysis/core.py, tests/test_core.py, pyproject.toml, README.md, .github/workflows/ci.yml …
          How to Run & Test: uv/poetry install; pytest -q; ruff check; mypy .
      - input: "@@CodeGen(mode=scaffold, language=cpp, runtime='gcc13 -std=c++20', frameworks=['gtest'], ci='github_actions', tests='both') Create a library + CLI."
        output_sketch: |
          Project Tree / Manifest: CMakeLists.txt, src/lib/foo.hpp/cpp, src/cli/main.cpp, tests/unit/test_foo.cpp, tests/integration/smoke.cpp, .github/workflows/ci.yml …
          Generated Files: full contents for CMakeLists.txt, main.cpp, foo.* and tests.
          How to Run & Test: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release; cmake --build build; ctest --test-dir build.
      - input: "@@CodeGen(mode=implement, language=python, frameworks=['fastapi','pytest'], targets=['service'], containerize='docker') Make a tiny FastAPI service with one endpoint."
        output_sketch: |
          Generated Files: src/app.py (FastAPI), tests/test_app.py, pyproject.toml, Dockerfile, README.md, .gitignore.
          How to Run & Test: uv/poetry install; uvicorn app:app; pytest -q; docker build -t app .
      - input: "@@CodeGen(mode=shim, language=ts, frameworks=['jest'], targets=['library']) Adapter between OldAPI.getUser() and NewAPI.fetchUserById(id:string)."
        output_sketch: |
          Generated Files: src/shims/userAdapter.ts with mapping; tests/shims/userAdapter.test.ts.
          How to Run & Test: npm i; npm test.
      - input: "@@CodeGen(mode=extend, language=python, extend_from='(paste tree here)', tests='unit') Add module analysis/io/csv.py and tests."
        output_sketch: |
          Project Tree / Manifest: shows diff/additions.
          Generated Files: new module and unit tests; respects existing layout and configs.

  - name: "@@CodeCheck"
    aliases: ["@@BugCheck", "@@StaticCheck"]
    category: "verification"
    description: "Diagnose code for errors, bugs, and incompatibilities across one or multiple snippets/modules—without proposing enhancements."
    trigger_pattern: '^@@CodeCheck(?:\(([^)]*)\))?\b'
    scope_rule: "inherits"
    parameters:
      - name: "language"
        type: enum
        allowed: ["auto","python","cpp","c","java","js","ts","go","rust","csharp","php","ruby","kotlin","scala","sql","bash","other"]
        required: false
        default: "auto"
        description: "Hint the primary language; 'auto' attempts detection from code fences/file names."
      - name: "cross_files"
        type: boolean
        required: false
        default: true
        description: "If true, check compatibility across multiple snippets/modules (imports, symbol linking, API contracts)."
      - name: "entry_point"
        type: string
        required: false
        default: ""
        description: "Optional entry file/function to anchor compatibility checks (e.g., 'main.cpp', 'app.py:main')."
      - name: "runtime"
        type: string
        required: false
        default: ""
        description: "Optional runtime/toolchain hints (e.g., 'python3.11', 'gcc13 -std=c++20', 'node20', 'postgres14'). Used only for diagnostics."
      - name: "strict"
        type: boolean
        required: false
        default: true
        description: "If true, flag borderline/ambiguous issues; if false, report only high-confidence problems."
      - name: "exec_allowed"
        type: boolean
        required: false
        default: false
        description: "Execution is not performed by default; this decorator is static/diagnostic-only."
    effect_contract:
      diagnostic_only: true                # no refactors, no enhancements
      no_suggestions: true                 # do not propose 'better' code
      detect_syntax_errors: true
      detect_type_interface_issues: true   # missing symbols, wrong arity/types, bad generics/templates
      detect_dependency_issues: true       # missing imports/includes/packages, circular deps
      detect_api_contract_mismatch: true   # caller/callee signature drift, version/API surface
      detect_resource_issues: true         # files/paths/env vars referenced but undefined
      detect_sql_schema_mismatch: true     # columns/tables/types not found (when applicable)
      detect_build_config_issues: true     # toolchain/flags inconsistencies when runtime hinted
      cross_file_analysis: "@parameters.cross_files"
      language_hint: "@parameters.language"
      entry_binding: "@parameters.entry_point"
      runtime_hint: "@parameters.runtime"
      strict_mode: "@parameters.strict"
      static_only_no_execution: "!@parameters.exec_allowed"
    structure_spec:
      sections:
        - "Scope & Assumptions"            # language/runtime inference, files considered, entry point
        - "Findings"                       # concrete issues with exact locations (file:line or snippet block)
        - "Compatibility Check (if multi-snippet)" # interfaces/linking/import graph notes
        - "Ambiguities / Unknowns"         # what would need environment info to decide
        - "Minimal Repro / Tests (suggested checks only)" # reproduce steps without proposing refactors
        - "Verdict"                        # pass/fail with confidence
    ordering:
      run_before: ["structure","tone","output_format"]  # diagnostics should shape content before formatting
      run_after: ["method"]                             
    compatibility:
      conflicts_with: []                  # allowed with @@Reasoning, @@RiskReport, @@CiteSources
    failure_behavior: "warn_and_continue" # if language can't be inferred, report ambiguity and proceed
    examples:
      - input: "@@CodeCheck(language=python, strict=true) \n```python\nimport numpy as np\nnp.arange(5).shape()\n```"
        output_sketch: |
          Scope & Assumptions: Python 3.x, single snippet.
          Findings: AttributeError risk — 'shape' is a property, not callable. Location: line 2.
          Ambiguities / Unknowns: None.
          Verdict: FAIL (high confidence).
      - input: "@@CodeCheck(cross_files=true, entry_point='main.cpp', runtime='gcc13 -std=c++20') \n#1: main.cpp ... \n#2: utils.hpp ... \n#3: utils.cpp ..."
        output_sketch: |
          Scope & Assumptions: C++20, files: main.cpp, utils.hpp, utils.cpp; entry: main.cpp.
          Compatibility Check: 'foo(int)' declared in utils.hpp but defined as 'foo(double)' in utils.cpp.
          Findings: Link-time/ODR mismatch likely; call site passes int.
          Verdict: FAIL (high confidence).
      - input: "@@CodeCheck(language=sql) \n```sql\nSELECT id, score FROM results WHERE status = 'ok' AND created_at > NOW() - INTERVAL '7 days';\n```"
        output_sketch: |
          Scope & Assumptions: SQL (PostgreSQL assumed).
          Ambiguities / Unknowns: Table/columns existence not verifiable without schema.
          Findings: None detected statically; time function usage valid for Postgres; compatibility uncertain for MySQL.
          Verdict: PASS (low-medium confidence).

  # ---------------------------------
  # User confirmation assist decorator. 
  # ---------------------------------

  - name: "@@RiskReport"
    aliases: ["@@ErrorReport"]   # backward compatibility
    category: "error_handling"
    description: "Highlight risks: if uncertainties, ambiguities, or conflicts exist, emit a 'Risk Report' section before the answer."
    trigger_pattern: '^@@RiskReport\b'
    scope_rule: "inherits"
    effect_contract:
      report_uncertainties: true
      report_conflicts: true
      include_confidence: true       # optional: low / medium / high
      confidence_scale: ["low","medium","high"]
      placement: "before_answer"
      json_mapping:
        risk_report_field: "risk_report"
        answer_field: "answer"
    structure_spec:
      sections: ["Risk Report", "Answer"]
    ordering:
      run_after: ["method", "structure", "verification"]
      run_before: ["tone"]
    compatibility:
      conflicts_with: []
    failure_behavior: "always_show_when_flagged"
    examples:
      - input: "@@RiskReport Provide the latest findings."
        output_sketch: |
          **Risk Report**: Ambiguity detected in data sources. Confidence: medium.
          **Answer**: Given the uncertainty, the most reliable statement is...


  - name: "@@Confirm"
    aliases: []
    category: "user_confirmation"
    description: "Provide a short preview and ask for confirmation before finalizing. By default shows 3 preview lines, but can be customized."
    trigger_pattern: '^@@Confirm(?:\((\d+)\))?\b'   # optional (N) for custom lines
    scope_rule: "inherits"
    parameters:
      - name: "preview_lines"
        type: integer
        required: false
        default: 3
    effect_contract:
      require_confirmation: true
      preview_lines: "@parameters.preview_lines"
    structure_spec:
      sections: ["Preview", "Confirm?"]
    ordering:
      run_after: ["output_format", "verification", "structure", "method", "error_handling", "tone"]
    compatibility:
      conflicts_with: []
    failure_behavior: "ask_once_then_continue"
    examples:
      - input: "@@Confirm Draft a response to the client."
        output_sketch: |
          Preview: Three-line synopsis...
          Confirm?: Proceed (yes/no)?
      - input: "@@Confirm(5) Write a summary of the report."
        output_sketch: |
          Preview: Five lines shown...
          Confirm?: Proceed (yes/no)?


  # ---------------------------------
  # IO decorator (active)
  # ---------------------------------
  - name: "@@OutputFormat"
    aliases: []
    category: "output_format"
    description: "Format the response in a specified structure (json, markdown, yaml, or xml)."
    trigger_pattern: '^@@OutputFormat\(([^)]+)\)'
    scope_rule: "inherits"
    parameters:
      - name: "format"
        type: enum
        allowed: ["json", "markdown", "yaml", "xml", "pdf", "docx"]
        required: true
    effect_contract:
      enforce_output_format: true
      strict: true
    output_shape:
      type_param: "format"       # bind to the provided parameter
      schema_ref: null           # optional JSON schema reference for json mode
    ordering:
      run_before: ["verification"]
    compatibility:
      conflicts_with: []
    failure_behavior: "warn_and_continue"
    examples:
      - input: "@@OutputFormat(json) Summarize the article."
        output_sketch: |
          { "summary": "..." }


  - name: "@@Tone"
    category: "tone"
    aliases: ["@@Style", "@@Voice"]
    description: "Adjust the tone of the response according to the specified style (formal, casual, friendly, technical, humorous, etc.)."
    trigger_pattern: '^@@Tone\(([^)]+)\)'
    scope_rule: "inherits"
    parameters:
      - name: "style"
        type: enum
        allowed: [
          "formal", 
          "casual", 
          "friendly", 
          "technical", 
          "humorous", 
          "neutral",
          "scientific",
          "academic",
          "argumentation",
          "educational",
          "motivational",
          "storyteller",
          "meditational"
    ]
        required: true
    effect_contract:
      enforce_tone: true
      style_binding: "@parameters.style"
    structure_spec:
      type: "tone_adjustment"
      target: "entire_response"
    ordering:
      run_after: ["verification", "structure", "method", "error_handling"]
      run_before: ["output_format", "user_confirmation"]
    compatibility:
      conflicts_with: []
    failure_behavior: "warn_and_continue"
    examples:
      - input: "@@Tone(scientific) Explain photosynthesis."
        output_sketch: "Precise, evidence-based explanation with terminology."
      - input: "@@Tone(academic) Write an abstract about black hole thermodynamics."
        output_sketch: "Formal, citation-ready academic style."
      - input: "@@Tone(argumentation) Defend the use of Bayesian inference in physics."
        output_sketch: "Structured argument with premises and conclusions."
      - input: "@@Tone(motivational) Write a message for a student before exams."
        output_sketch: "Encouraging, uplifting tone."
      - input: "@@Tone(storyteller) Describe the birth of the universe."
        output_sketch: "Narrative, engaging story with imagery."
      - input: "@@Tone(meditational) Guide a short breathing exercise."
        output_sketch: "Calm, soothing, rhythmic phrasing."




  # ---------------------------------
  # Lang decorator (active)
  # ---------------------------------
  - name: "@@LangCoach"
    aliases: ["@@LanguageTutor", "@@LangTutor", "@@LanguageCoach"]
    category: "method"
    description: "Coach-led language-learning flow for B1+ learners: asks a clear question in the target language, gathers the learner's paragraph-length reply, estimates CEFR level, and delivers step-by-step feedback—covering grammar, word choice, idioms/expressions, and a strengths/mistakes summary. Can source questions from general prompts, domains, or current news."
    trigger_pattern: '^@@LangCoach\(([^,]+)(?:, *([^,]+))?\)'
    scope_rule: "inherits"
    parameters:
      - name: "target_language"
        type: string
        required: true
        description: "Language the learner wants to practice (question + corrections examples use this). Parsed from first positional argument."
      - name: "topic_mode"
        type: enum
        allowed: ["auto", "news", "general", "custom", "domain"]
        required: false
        default: "auto"
        description: "Where the question/topic comes from: auto→fallback to general; news→pull a timely topic; custom→user-provided; domain→choose from the given fields. Parsed from second positional argument if present."
      - name: "domains"
        type: list
        item_type: string
        required: false
        description: "Relevant fields when topic_mode='domain' (e.g., ['physics','history','social science'])."
      - name: "custom_topic"
        type: string
        required: false
        description: "Exact topic/question seed when topic_mode='custom'."
      - name: "cefr_min"
        type: enum
        allowed: ["B1","B2","C1","C2"]
        required: false
        default: "B1"
        description: "This tutor is intended for B1+; if the detected level is below this, provide a simpler re-phrasing or recommend starter resources."
      - name: "question_complexity"
        type: enum
        allowed: ["simple","standard","advanced"]
        required: false
        default: "standard"
      - name: "answer_length_hint"
        type: enum
        allowed: ["short","paragraph","two_paragraphs","free"]
        required: false
        default: "paragraph"
      - name: "level_detection"
        type: enum
        allowed: ["auto","manual"]
        required: false
        default: "auto"
        description: "auto→estimate CEFR from the learner’s reply; manual→expect user to declare level in prompt."
      - name: "level_nudge"
        type: enum
        allowed: ["none","half","one"]
        required: false
        default: "half"
        description: "How much to pitch feedback above the detected level: none (same level), half (~A2.5/B1.5 etc.), one (full level up)."
      - name: "feedback_sections"
        type: list
        item_type: enum
        item_type_allowed: ["grammar","word_choice","idioms_expressions","better_alternatives","summary"]
        required: false
        default: ["grammar","word_choice","idioms_expressions","better_alternatives","summary"]
        description: "Which feedback blocks to emit and in what order."
      - name: "news_recency_days"
        type: integer
        required: false
        default: 7
        description: "When topic_mode='news', choose trending items within this many days."
      - name: "news_domains"
        type: list
        item_type: string
        required: false
        default: ["bbc.com","reuters.com","apnews.com","dw.com","aljazeera.com"]
        description: "Preferred sources for news-topic selection."
    effect_contract:
      two_turn_flow: true                  # Turn 1: ask; Turn 2: analyze & feedback
      ask_in_target_language: true
      require_b1_plus: true
      estimate_cefr: true                  # A1..C2 estimation from learner's reply
      adapt_feedback_to_level: true        # feedback phrased at learner level + nudge
      step_by_step_feedback: true
      maintain_feedback_order: true
      use_web_for_news: true               # when topic_mode='news', browse with recency filter
      cite_news_briefly: true              # include source + date in 1 line when news is used
      avoid_hidden_chain_of_thought: true
    structure_spec:
      phases:
        - name: "Question"
          fields:
            - key: "prompt_target_language"
              description: "A clear, B1+ suitable question in the target language."
            - key: "instructions"
              description: "Ask for one–two paragraphs (or free), and remind the learner of the feedback process."
            - key: "(optional) news_context_one_liner"
              description: "If topic_mode='news': 1 line with outlet + date."
        - name: "Feedback"               # emitted on the follow-up turn after the learner replies
          fields:
            - key: "CEFR_estimate"
              description: "Detected level with 1–2 reasons."
            - key: "grammar"
            - key: "word_choice"
            - key: "idioms_expressions"
            - key: "better_alternatives"
            - key: "summary"
            - key: "follow_up_question"
              description: "A slightly harder follow-up question in the target language."
    ordering:
      run_after: ["method","structure","verification"]
      run_before: ["tone","output_format","user_confirmation"]
    compatibility:
      conflicts_with: []
    failure_behavior: "warn_and_continue"
    examples:
      - input: "@@LangCoach(English, news)"
        output_sketch: |
          Question: (in English) A B1/B2-friendly prompt tied to a recent BBC/Reuters story (with a one-line source + date). Request 1–2 paragraphs.
          After learner answers → Feedback: CEFR estimate (e.g., B1), then grammar → word choice → idioms → better alternatives → summary. Slightly harder follow-up question at B1.5.
      - input: "@@LangCoach(Italian, domain)"
        output_sketch: |
          Question: (in Italian) Ask about a physics topic suitable for B2.
          After learner answers → Feedback sections at B2.5, then a follow-up question in Italian.



  # ---------------------------------
  # daily life decorator 
  # ---------------------------------
  - name: "@@MedProof"
    aliases: ["@@MedTemplate", "@@MedBoxes"]
    category: "utility"
    description: "Emit a pre-formatted MedProof template with a bold disclaimer and three bold-separated sections (evidence, caveats, conclusion) using boxed placeholders. Mirrors MedProof source restrictions."
    trigger_pattern: '^@@MedProofTemplate\\b'
    scope_rule: "inherits"

    # NOTE: This is a template/formatting tool. It does not *have* to browse,
    # but if your runtime fetches example stubs, enforce the same strict policy as @@MedProof.
    effect_contract:
      emits_template_only: true

      # Disclaimer must be first
      always_print_disclaimer: true
      disclaimer_position: "top"
      disclaimer_text: |
        **Info only — not medical advice. Always consult a qualified clinician.**
        **Online health claims can be misleading or promotional — use caution.**

      # Section layout with bold titles and bold separators
      section_structure:
        - header: "**Clinically Proven Findings**"
          start_separator: "**━━━━━━━━━━━━━━━━━━━━━━━━**"
          end_separator:   "**━━━━━━━━━━━━━━━━━━━━━━━━**"
        - header: "**CAVEAT — Fake Claims & Not-Proven Information**"
          start_separator: "**━━━━━━━━━━━━━━━━━━━━━━━━**"
          end_separator:   "**━━━━━━━━━━━━━━━━━━━━━━━━**"
        - header: "**Conclusion**"
          start_separator: "**━━━━━━━━━━━━━━━━━━━━━━━━**"
          end_separator:   "**━━━━━━━━━━━━━━━━━━━━━━━━**"
      enforce_order: true

      # —— Source controls copied from @@MedProof (strict allowlist; fail-closed) ——
      whitelist_only_mode: true
      forbid_unknown_domains: true
      require_peer_reviewed_journal: true
      reject_preprints: true
      require_pubmed_id: true   # except regulator label/guideline/advisory

      allowed_source_types:
        - systematic_review
        - meta_analysis
        - randomized_controlled_trial
        - evidence_based_guideline
        - drug_label
        - safety_advisory

      allowed_domains:
        - "pubmed.ncbi.nlm.nih.gov"
        - "clinicaltrials.gov"
        - "cochranelibrary.com"
        - "who.int"
        - "nice.org.uk"
        - "ema.europa.eu"
        - "fda.gov"
        - "cdc.gov"
        - "nih.gov"
        - "jamanetwork.com"
        - "bmj.com"
        - "thelancet.com"
        - "nejm.org"
        - "nature.com"
        - "cell.com"
        - "sciencedirect.com"
        - "link.springer.com"
        - "springer.com"
        - "wiley.com"
        - "tandfonline.com"
        - "academic.oup.com"
        - "oup.com"
        - "cambridge.org"
        - "sagepub.com"
        - "karger.com"
        - "frontiersin.org"
        - "aacrjournals.org"
        - "ashpublications.org"
        - "esmo.org"
        - "escardio.org"
        - "plos.org"

      forbidden_domains:
        - "*.instagram.com"
        - "*.tiktok.com"
        - "*.facebook.com"
        - "*.x.com"
        - "*.twitter.com"
        - "*.reddit.com"
        - "*.youtube.com"
        - "*.substack.com"
        - "*.medium.com"
        - "*.wordpress.com"
        - "*.blogspot.com"
        - "*.quora.com"
        - "*.pinterest.*"
        - "*.weebly.com"
        - "*.wixsite.com"
        - "arxiv.org"
        - "medrxiv.org"
        - "biorxiv.org"
        - "researchgate.net"

      web_search_policy:
        must_browse: false                    # template itself doesn’t need browsing
        restrict_to_allowed_domains: true     # if any lookup occurs, enforce allowlist
        disallow_image_query: true
        disallow_product_query: true

      # Optional: if your engine populates common myths, only from official myth pages
      caveat_policy:
        max_items: 5
        find_myths_from_allowed_domains_only: true
        crosscheck_against_evidence_section: true
        format_each:
          - "Claim:"
          - "Evidence check (peer-reviewed/official):"
          - "Status: Not proven / Refuted"

      # Boxed placeholders for each section
      template_boxes:
        clinically_proven: |
          > **Question/Topic:** …
          > **Top Evidence (PMID/DOI + year):** …
          > **Study Type & Quality (A/B/C):** …
          > **Population/Setting:** …
          > **Effect Size (ARR/RRR, NNT/NNH, timeframe):** …
          > **Guideline Stance (WHO/NICE/…):** …
          > **External Validity / Practicality:** …

        caveats: |
          > **Claim 1:** …
          > **Evidence check (peer-reviewed/official):** …
          > **Status:** Not proven / Refuted
          >
          > **Claim 2:** …
          > **Evidence check:** …
          > **Status:** …
          >
          > *(List up to 5 major myths)*

        conclusion: |
          > **Verdict (1 line):** …
          > **Practical Notes (how/if to use):** …
          > **Contraindications / Red Flags:** …
          > **Confidence:** Low / Medium / High

    structure_spec:
      type: "template_render"
      render_order:
        - "disclaimer"
        - "Clinically Proven Findings"
        - "CAVEAT — Fake Claims & Not-Proven Information"
        - "Conclusion"
      bind_boxes: true

    examples:
      - input: "@@MedProofTemplate"
        output_sketch: |
          **Info only — not medical advice. Always consult a qualified clinician.**
          **Online health claims can be misleading or promotional — use caution.**

          **━━━━━━━━━━━━━━━━━━━━━━━━**
          **Clinically Proven Findings**
          > **Question/Topic:** …
          > **Top Evidence (PMID/DOI + year):** …
          > **Study Type & Quality (A/B/C):** …
          > **Population/Setting:** …
          > **Effect Size (ARR/RRR, NNT/NNH, timeframe):** …
          > **Guideline Stance (WHO/NICE/…):** …
          > **External Validity / Practicality:** …

          **━━━━━━━━━━━━━━━━━━━━━━━━**
          **CAVEAT — Fake Claims & Not-Proven Information**
          > **Claim 1:** …
          > **Evidence check (peer-reviewed/official):** …
          > **Status:** Not proven / Refuted
          >
          > **Claim 2:** …
          > **Evidence check:** …
          > **Status:** …

          **━━━━━━━━━━━━━━━━━━━━━━━━**
          **Conclusion**
          > **Verdict (1 line):** …
          > **Practical Notes (how/if to use):** …
          > **Contraindications / Red Flags:** …
          > **Confidence:** …